/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package virtualpianoauto;

import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef.HWND;
import com.sun.jna.platform.win32.WinUser.WNDENUMPROC;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import virtualpianoauto.midi.Event;
import virtualpianoauto.midi.Song;

/**
 *
 * @author Rey
 */
public class MainFrame extends javax.swing.JFrame {

    private Song mSong;
    private int mCurTrackIndex;
    private List<Window> mWindows = new ArrayList<>();
    private SongPlayer mPlayer = new SongPlayer();
    
    
//    public interface User32 extends StdCallLibrary {
//        User32 INSTANCE = (User32) Native.loadLibrary("user32", User32.class);
//        HWND GetForegroundWindow();  // add this
//        int GetWindowTextA(PointerType hWnd, byte[] lpString, int nMaxCount);
//    }
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btOpen = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btPlay = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbEvent = new javax.swing.JTable();
        cbTrack = new javax.swing.JComboBox();
        cbWindow = new javax.swing.JComboBox();
        btRefresh = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tf_milis = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VirtualPiano Auto");

        btOpen.setText("Open File");
        btOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOpenActionPerformed(evt);
            }
        });

        jLabel1.setText("Events:");

        btPlay.setText("Start");
        btPlay.setEnabled(false);
        btPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPlayActionPerformed(evt);
            }
        });

        tbEvent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Tick", "Down"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbEvent.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tbEvent);

        cbTrack.setEnabled(false);
        cbTrack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTrackActionPerformed(evt);
            }
        });

        btRefresh.setText("Refresh");
        btRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefreshActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("MilisPerTick:");

        tf_milis.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btPlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbTrack, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbWindow, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_milis, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btOpen)
                    .addComponent(cbTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tf_milis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btRefresh)
                    .addComponent(btPlay)
                    .addComponent(cbWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOpenActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "MIDI file", "mid", "midi");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            parseFile(chooser.getSelectedFile());      
            if(mWindows.isEmpty())
                btRefreshActionPerformed(null);
        }
    }//GEN-LAST:event_btOpenActionPerformed

    private void btPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPlayActionPerformed
        if(mPlayer.isPlaying()){
            mPlayer.stop();
            btPlay.setText("Start");
            tf_milis.setEnabled(true);
            btOpen.setEnabled(true);
            cbTrack.setEnabled(true);
        }
        else{
            Window window = mWindows.get(cbWindow.getSelectedIndex());
            User32.INSTANCE.SetForegroundWindow(window.hWnd);

            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }

            System.out.println("Started!");

            try {
                mPlayer.play(mSong.events[mCurTrackIndex], getMilisPerTick());
                
                btPlay.setText("Stop");
                tf_milis.setEnabled(false);
                btOpen.setEnabled(false);
                cbTrack.setEnabled(false);
            
            } catch (Exception ex) {
                System.out.println("error" + ex);
                ex.printStackTrace();
            }
        }  
    }//GEN-LAST:event_btPlayActionPerformed

    private void cbTrackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTrackActionPerformed
        onTrackChanged(cbTrack.getSelectedIndex());
    }//GEN-LAST:event_cbTrackActionPerformed

    private void btRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefreshActionPerformed
        mWindows.clear();
        final DefaultComboBoxModel model = (DefaultComboBoxModel)cbWindow.getModel();
        model.removeAllElements();
        
        User32.INSTANCE.EnumWindows(new WNDENUMPROC() {
            int count = 0;
            @Override
            public boolean callback(HWND hWnd, Pointer arg1) {
                char[] windowText = new char[512];
                User32.INSTANCE.GetWindowText(hWnd, windowText, 512);
                String wText = Native.toString(windowText);

                // get rid of this if block if you want all windows regardless of whether
                // or not they have text
                if (wText.isEmpty()) {
                   return true;
                }
                
                Window window = new Window(hWnd, wText);
                mWindows.add(window);
                model.addElement(wText);
                
                return true;
            }
        }, null);
    }//GEN-LAST:event_btRefreshActionPerformed

    private void parseFile(File file){
        try {
            mSong = MidiParser.parse(file);            
            populateTracks(mSong);
            tf_milis.setText(String.valueOf(mSong.miliPerTick));
            tf_milis.setEnabled(true);
            btPlay.setEnabled(true);
            btPlay.setText("Start");
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void populateTracks(Song song){
        DefaultComboBoxModel model = (DefaultComboBoxModel)cbTrack.getModel();
        model.removeAllElements();
        
        for(int i = 0; i < song.events.length; i++){
            model.addElement("Track " + (i + 1));
        }
        
        onTrackChanged(0);
        
        cbTrack.setEnabled(true);
    }
    
    private void onTrackChanged(int index){
        mCurTrackIndex = index;
        populateEvents(mSong.events[mCurTrackIndex]);
    }
    
    private void populateEvents(Event[] events){        
        DefaultTableModel model = (DefaultTableModel) tbEvent.getModel();
        
        //clear old data
        for (int i = model.getRowCount() - 1; i >= 0; i--) 
            model.removeRow(i);
        
        for(Event event : events)
            model.addRow(new Object[]{event.key.character, event.tick, event.down});    
    }
    
    private long getMilisPerTick(){
        try{
            return Long.parseLong(tf_milis.getText());
        }
        catch(Exception ex){
            tf_milis.setText(String.valueOf(mSong.miliPerTick));
            return mSong.miliPerTick;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btOpen;
    private javax.swing.JButton btPlay;
    private javax.swing.JButton btRefresh;
    private javax.swing.JComboBox cbTrack;
    private javax.swing.JComboBox cbWindow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbEvent;
    private javax.swing.JTextField tf_milis;
    // End of variables declaration//GEN-END:variables
}
